server:
    port: ${APP_PORT:8080}

loan-hub:
    page-size: 10
    cred-score-service-url: ${CREDIT_SCORE_SERVICE_URL:http://localhost:8081/api/}
    loan-requests-exchange: loan-requests-exchange
    new-loan-requests-queue: loan-requests-new
    out-box-pattern-enabled: true
    publish-new-loan-requests-job-cron: ${PUBLISH_NEW_LOAN_REQUESTS_JOB_CRON:0 */1 * * * *} # every 5 minutes
    publish-new-loan-requests-per-job: ${PUBLISH_NEW_LOAN_REQUESTS_PER_JOB:5}



spring:
  cache:
    type: redis

  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:16379}
      password: ${REDIS_PASSWORD:redis}
      username: ${REDIS_USERNAME:redis}

      cache-null-values: false
      key-prefix: loan-hub-cache
      #      time-to-live: 60000
      use-key-prefix: true
      client-type: lettuce
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
      ssl:
        enabled: false


############################### Database ############################

  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:15432/postgres}
    username: ${DB_USER:postgres}
    password: ${DB_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver

  jpa:
#    show-sql: true
    open-in-view: false

  # ref: https://contribute.liquibase.com/extensions-integrations/directory/integration-docs/springboot/configuration/
  liquibase:
    change-log: classpath:/db/migrations/changelog_master.xml
  #   rollback-file: rollback.sql


  ############################## Rabbit MQ ############################

  rabbitmq:
    enabled: true
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:rabbitmq}
    password: ${RABBITMQ_PASSWORD:rabbitmq}


####################################### Resilience4j ############################
resilience4j:
  retry:
    backends:
      credit-score-service:
        max-attempts: 2
        max-wait-duration: 3s
        ignore-exceptions:
          - com.paravar.instacred.common.domain.models.CreditScoreNotFoundException

  circuit-breaker:
    backends:
      credit-score-service:
        sliding-window-type: COUNT_BASED  # COUNT_BASED, TIME_BASED # how to evaluate
        sliding-window-size: 6  # the last 5 calls to the failure rate.
        failure-rate-threshold: 50 # if 50% of the last 5 calls fail, transition to open state
        minimum-number-of-calls: 4  # total number of calls that must occur in the sliding window before the failure rate is evaluated.
                                    # the window-size 6 & if only 2 calls are made...then it won't calculate the failure rate
                                    # failing-rate-threshold = [(number of failed calls) / (number of calls)] * 100

        wait-duration-in-open-state: 20s # time to stay open (blocking calls) before transitioning to the half-open state.
        permitted-number-of-calls-in-half-open-state: 2 # if calls succeed, transition to closed state else open state

  ####   The system tracks the last 6 calls.
  ####   If 50% or more of them fail, the circuit breaker enters the "open" state.
  ####   After 20 seconds in the "open" state, the system moves to the "half-open" state and allows up to 2 calls.
  ####   If the 2 calls succeed, the circuit breaker closes (restores normal operation); if they fail, it goes back to "open."

        ignore-exceptions:
          - com.paravar.instacred.common.domain.models.CreditScoreNotFoundException


############################## Management ############################

management:
  info:
    git:
      mode: full
  endpoints:
    web:
      exposure:
        include: "*"
    health:
      show-details: always


################################# Logging ############################

#logging.level:
#    org.springframework.web: DEBUG
#    org.springframework.boot.autoconfigure: DEBUG
#    io.lettuce: DEBUG
#    liquibase: DEBUG
